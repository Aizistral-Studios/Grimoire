buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "github"
            url = "https://github.com/juanmuscaria/maven/raw/master"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-1.4.0-SNAPSHOT'
    }
}

apply plugin: 'forge'
project.evaluationDependsOn(":Grimoire-shared")

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

archivesBaseName = "Grimoire-mc1.7.10"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    //mappings = "stable_12"
    runDir = "minecraft"
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = "juanmuscaria"
        url = "https://github.com/juanmuscaria/maven/raw/master"
    }
	flatDir {
		dirs 'libs'
	}
    mavenCentral()
}

dependencies {
    annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")
	
	implementation(project(':Grimoire-shared'))
	implementation('org.jetbrains:annotations:20.1.0')
    implementation name: "mixin-0.7.11-SNAPSHOT-REPACK"
    implementation name: "EventHelper-1.7.10-1.13.1-dummydev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand "version": project.version, "mcversion": project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

}

ext {
    new File(project.buildDir, 'mixins').mkdirs()
    mixinSrg = new File(project.buildDir, 'mixins/mixins.io.github.crucible.grimoire.srg')
    mixinSrg.createNewFile()
    mixinRefMap = new File(project.buildDir, "mixins/grimoire.refmap.json")
    mixinRefMap.createNewFile()
}

tasks.withType(Jar) {
	if (name.equals('jar') || name.equals('devJar')) {
		manifest {
			attributes([
					"Specification-Title": "io.github.crucible.grimoire",
					"Specification-Vendor": "Grimoire",
					"Specification-Version": "1", // We are version 1 of ourselves
					"Implementation-Title": project.name,
					"Implementation-Version": "${project.version}",
					"Implementation-Vendor" :"Grimoire",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					'FMLCorePlugin': "io.github.crucible.grimoire.mc1_7_10.GrimoireCoremod",
					'FMLCorePluginContainsFMLMod': 'true',
					"ForceLoadAsMod": "true",
					'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
			])
		}
	}
}

jar {
    from project.mixinRefMap

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':Grimoire-shared').sourceSets.main.output
	from zipTree('libs/mixin-0.7.11-SNAPSHOT-REPACK.jar')

}

task devJar(type: Jar) {
	archiveClassifier = 'dev'
	from sourceSets.main.output
	from project.mixinRefMap
	
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':Grimoire-shared').sourceSets.main.output
	from zipTree('libs/mixin-0.7.11-SNAPSHOT-REPACK.jar')
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'dev-sources'
	
	from sourceSets.main.allSource
	from project(':Grimoire-shared').sourceSets.main.allSource
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from zipTree('libs/mixin-0.7.11-SNAPSHOT-REPACK-sources.jar')
}

task apiJar(type: Jar) {
	archiveClassifier = 'api'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	
	from(project(':Grimoire-shared').sourceSets.main.output) {
		include '**/api/**'
	}	
	
	from(sourceSets.main.output) {
		include '**/api/**'
	}
	
	from(zipTree('libs/mixin-0.7.11-SNAPSHOT-REPACK.jar')) {
		exclude 'org/spongepowered/asm/launch/MixinBootstrap**'
		exclude 'org/spongepowered/asm/mixin/Mixins**'
		exclude 'com/google/gson/**'
		exclude 'org/apache/**'
	}
}

task apiSourcesJar(type: Jar) {
	archiveClassifier = 'api-sources'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	
	from(project(':Grimoire-shared').sourceSets.main.allSource) {
		include '**/api/**'
	}	
	
	from(sourceSets.main.allSource) {
		include '**/api/**'
	}
	
	from(zipTree('libs/mixin-0.7.11-SNAPSHOT-REPACK-sources.jar')) {
		exclude 'org/spongepowered/asm/launch/MixinBootstrap**'
		exclude 'org/spongepowered/asm/mixin/Mixins**'
		exclude 'com/google/gson/**'
		exclude 'org/apache/**'
	}
}

reobf {
    addExtraSrgFile project.mixinSrg
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}

compileJava.dependsOn copySrgs

artifacts {
	archives devJar
	archives sourcesJar
	archives apiJar
	archives apiSourcesJar
}