apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	flatDir {
		dirs 'libs'
	}
    mavenCentral()
}

tasks.withType(Jar) {
	if (name.equals('jar') || name.equals('devJar')) {
		manifest {
			attributes([
					"Specification-Title": project.group,
					"Specification-Vendor": "CrucibleMC Team",
					"Specification-Version": "1",
					"Implementation-Title": project.name,
					"Implementation-Version": project.version,
					"Implementation-Vendor": "CrucibleMC Team",
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
					'IsThatYouGrimoire': "Indeed",
					'FMLCorePluginContainsFMLMod': 'true',
					"ForceLoadAsMod": "true",
					'TweakOrder': '-2147482648',
					'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
			])
		}
	}
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':Grimoire-shared').sourceSets.main.output
	from(zipTree(mixinRepackFile)) {
		exclude 'META-INF/MANIFEST.MF'
		exclude 'LICENSE.txt'
	}
}

task devJar(type: Jar) {
	archiveBaseName = project.name + '-dev'
	archiveClassifier = 'dev'
	from sourceSets.main.output
	
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from project(':Grimoire-shared').sourceSets.main.output
	from(zipTree(mixinRepackFile)) {
		exclude 'META-INF/MANIFEST.MF'
		exclude 'LICENSE.txt'
	}
}

task sourcesJar(type: Jar) {
	archiveBaseName = project.name + '-dev'
	archiveClassifier = 'dev-sources'
	
	from sourceSets.main.allSource
	from project(':Grimoire-shared').sourceSets.main.allSource
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from(zipTree(mixinRepackFileSources)) {
		exclude 'META-INF/MANIFEST.MF'
		exclude 'LICENSE.txt'
	}
}

task apiJar(type: Jar) {
	archiveBaseName = project.name + '-api'
	archiveClassifier = 'api'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	
	from(project(':Grimoire-shared').sourceSets.main.output) {
		include '**/api/**'
	}	
	
	from(sourceSets.main.output) {
		include '**/api/**'
	}
	
	from(zipTree(mixinRepackFile)) {
		exclude 'org/spongepowered/asm/launch/MixinBootstrap**'
		exclude 'org/spongepowered/asm/mixin/Mixins**'
		exclude 'com/google/gson/**'
		exclude 'org/apache/**'
		exclude 'META-INF/MANIFEST.MF'
		exclude 'LICENSE.txt'
	}
}

task apiSourcesJar(type: Jar) {
	archiveBaseName = project.name + '-api'
	archiveClassifier = 'api-sources'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	
	from(project(':Grimoire-shared').sourceSets.main.allSource) {
		include '**/api/**'
	}	
	
	from(sourceSets.main.allSource) {
		include '**/api/**'
	}
	
	from(zipTree(mixinRepackFileSources)) {
		exclude 'org/spongepowered/asm/launch/MixinBootstrap**'
		exclude 'org/spongepowered/asm/mixin/Mixins**'
		exclude 'com/google/gson/**'
		exclude 'org/apache/**'
		exclude 'META-INF/MANIFEST.MF'
		exclude 'LICENSE.txt'
	}
}

// TODO Fix all these errors someday

/*
task commonJavadoc(type: Javadoc) {
	classpath += configurations.compile
	source = project(':Grimoire-shared').sourceSets.main.allJava
}

javadoc {
	classpath += configurations.compile
}


task javadocJar(type: Jar) {
    classifier = "javadoc"
	
    from javadoc
    from commonJavadoc
}

javadocJar.dependsOn javadoc
javadocJar.dependsOn commonJavadoc
*/

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.mcVersion

    from("${project.projectDir}/../docs") {
        include "mcmod.info"
        expand "version": project.version
    }
	
	from("${project.projectDir}/../docs") {
		include "CHANGELOG.md"
	}

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

artifacts {
	archives devJar
	archives sourcesJar
}